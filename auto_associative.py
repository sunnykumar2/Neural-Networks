# -*- coding: utf-8 -*-
"""Auto_Associative.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kHYD63-hFaFXTXgFNbSaV7YxjDm6YrxZ
"""

import numpy as np

class Associative_Memory:
  def __init__(self):
    self.weights=[]
    for i in range(0,Patterns[0].size):
      self.weights.append([0]*(Patterns[0].size))
  
  def activation(self,yin):
    yout=[]
    for i in yin:
      if(i>0):
        yout.append(1)
      if(i<0):
        yout.append(-1)
    return yout


  def fit(self,Patterns):
    for input in Patterns:
      input=np.array([input])
      inputt=input.reshape((-1,1))
      weight=inputt.dot(input)
      self.weights=np.add(self.weights,weight)
    print("Final Weight Matrix")
    print(self.weights)
  def predict(self,pattern):
    pattern=np.array(pattern)
    yin=pattern.dot(self.weights)
    yout=self.activation(yin)
    print("Predicted Pattern")
    print(yout)

# Input Patterns
Patterns=np.array([[1,-1,-1,-1],[1,1,-1,-1],[-1,-1,-1,1],[-1,-1,1,1]])

Patterns=[]
val=(int)((input)("Enter no. of patterns "))
size=(int)((input)("Enter size of each patterns "))
for i in  range(0,val):
  print(f'Enter Pattern {i+1} ')

  pattern=input()
  pattern = list(map(int,pattern.split(' ')))
  Patterns.append(pattern)

Patterns=np.array(Patterns)

Model=Associative_Memory()
Model.fit(Patterns)

# Testing with same Input Pattern
Model.predict([-1,-1,1,1])
Model.predict([1,1,-1,-1])

# Testing with missing entry in Pattern
Model.predict([0,-1,1,1])
Model.predict([0,0,-1,-1])